/**
 * @file Participant.hpp
 * @copyright Copyright (C) 2016-2022 Flexiv Ltd. All Rights Reserved.
 */

#ifndef _KOSTAL_PARTICIPANT_HPP_
#define _KOSTAL_PARTICIPANT_HPP_

#include "SystemParams.hpp"

// There is a type conflict between Eigen and Fast-RTPS
#define ALIVE_ORG_DEF ALIVE
#if defined ALIVE
#undef ALIVE
#include <flexiv/middleware2/fast_rtps_node.h>
#define ALIVE ALIVE_ORG_DEF
#else
#include <flexiv/middleware2/fast_rtps_node.h>
#endif

// message headers for KostalLever.idl
#include "KostalLever.h"
#include "KostalLeverPubSubTypes.h"

// alias of FastRTPSNode
typedef flexiv::middleware2::FastRTPSNode Node;

// alias of different message class generated by idl files
typedef kostal_gui_msgs::msg::KostalLever KostalMsg;

// alias of different messages' serialization functions
typedef kostal_gui_msgs::msg::KostalLeverPubSubType KostalPubSubType;

// alias of rdk client's publisher and subscriber with different message types
// respectively
typedef flexiv::middleware2::FastRTPSPublisher<KostalPubSubType>
    RdkClientPublisher;

namespace kostal {

/**
 * @class Participant
 * @brief This class represent participant's actions for rdk client to publish
 * robot states and subscribe assigned workplans
 */
class Participant
{
public:
    Participant() = default;
    virtual ~Participant() = default;

    /**
     * @brief Create a publisher by passing node pointer into this function
     * @param[in] node FastRTPSNode pointer
     * @param[in] topicName the name of the topic that will be published to
     * @return the shared pointer of the rdk client publisher
     */
    std::shared_ptr<RdkClientPublisher> createPublisher(
        Node* node, std::string topicName);

    /**
     * @brief Publish messages with assigned value
     * @param[in] publisher shared pointer of the RdkClientPublisher
     * @param[in] pub_msg the message that will be published with
     * @param[in] statusLight Light status
     */
    void publishMsg(std::shared_ptr<RdkClientPublisher> publisher,
        KostalMsg* pub_msg, uint8_t statusLight);

    /**
     * @brief Publish messages with assigned value
     * @param[in] publisher shared pointer of the RdkClientPublisher
     * @param[in] pub_msg the message that will be published with
     */
    void publishMsg(
        std::shared_ptr<RdkClientPublisher> publisher, KostalMsg* pub_msg);

    /**
     * @brief Publish messages with assigned value
     * @param[in] publisher shared pointer of the RdkClientPublisher
     * @param[in] pub_msg the message that will be published with
     * @param[in] task_name the pointer task name that will be published
     * @param[in] task_type the pointer task type that will be published
     */
    void publishMsg(std::shared_ptr<RdkClientPublisher> publisher,
                    KostalMsg* pub_msg, std::string* task_name, std::string* task_type);

    void publishTestmanMsg(std::shared_ptr<RdkClientPublisher> publisher, KostalMsg *pub_msg, uint8_t testmanStatusLight);
    void publishRobotMsg(std::shared_ptr<RdkClientPublisher> publisher, KostalMsg *pub_msg, uint8_t robotStatusLight);
    void publishSpiMsg(std::shared_ptr<RdkClientPublisher> publisher, KostalMsg *pub_msg, uint8_t spiStatusLight);
};

} /* namespace kostal */

#endif // _KOSTAL_PARTICIPANT_HPP_
